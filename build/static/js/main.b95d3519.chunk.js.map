{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","important","ListItem","ListItemButton","sx","bgcolor","ListItemIcon","ListItemText","primary","content","Button","variant","color","onClick","backgroundColor","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","className","align","List","map","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","console","log","target","type","marginTop","ReactDOM","render","document","getElementById"],"mappings":"6OA+BeA,EArBF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACND,EAAKE,UAGnB,OAGF,cAACC,EAAA,EAAD,UACA,eAACC,EAAA,EAAD,CAAgBC,GAAI,CAACC,QAAQ,WAA7B,UACE,cAACC,EAAA,EAAD,IAEA,cAACC,EAAA,EAAD,CAAcC,QAAST,EAAKU,UAC5B,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAASb,EAAkBI,GAAI,CAACU,gBAAgB,WAA5F,qC,iBCrBIC,EAAU,aAoBD,EAjBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAe5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,SCqF5BK,G,MA5FH,WAAO,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGcF,mBAAS,IAHvB,mBAGTG,EAHS,KAGAC,EAHA,OAIcJ,oBAAS,GAJvB,mBAITK,EAJS,KAIAC,EAJA,KAShBC,qBAAU,WACRC,IAEGhB,MAAK,SAAAiB,GACNP,EAASO,QAEV,IAEH,IAsCMC,EAAcL,EAClBJ,EACAA,EAAMU,QAAO,SAAAtC,GAAI,OAAoB,GAAhBA,EAAKE,aAE5B,OACE,sBAAKqC,UAAU,UAAf,UACE,oBAAIC,MAAM,SAAV,yCAEA,8BACE,eAAC7B,EAAA,EAAD,CAAQG,QAAS,kBAAMmB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,cAACS,EAAA,EAAD,UACGJ,EAAYK,KAAI,SAAC1C,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAxCD,SAAAuB,GACzB,IAAMxB,EAAO4B,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEpB,KAAOA,KAChCqB,EAAW,2BAAQ7C,GAAR,IAAcE,WAAYF,EAAKE,YAEhDiC,EACQX,EAAIqB,GACT1B,MAAK,SAAA2B,GACNjB,EAASD,EAAMc,KAAI,SAAA1C,GAAI,OAAIA,EAAKwB,KAAOA,EAAKxB,EAAO8C,SAEpDC,OAAM,SAAAC,GACLC,MAAM,aAAD,OACUjD,EAAKU,QADf,sCAGLmB,EAASD,EAAMU,QAAO,SAAAM,GAAC,OAAIA,EAAEpB,KAAOA,SA2BN0B,CAAmBlD,EAAKwB,MAF3CxB,EAAKwB,SAMhB,uBAAM2B,SA5DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB5C,QAASoB,EACTyB,MAAM,IAAIC,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,IAG7BxB,EACUmB,GACLnC,MAAK,SAAA2B,GACNjB,EAASD,EAAMgC,OAAOd,IACtBf,EAAW,QAgDYS,MAAM,SAA/B,UACE,uBAAOqB,MAAO/B,EAASgC,SA5BJ,SAACV,GACxBW,QAAQC,IAAIZ,EAAMa,OAAOJ,OACzB9B,EAAWqB,EAAMa,OAAOJ,UA2BpB,uBACA,cAAClD,EAAA,EAAD,CACEuD,KAAK,SACLtD,QAAQ,YACRP,GAAI,CAAE8D,UAAW,EAAGpD,gBAAiB,WAHvC,4BCxFRqD,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b95d3519.chunk.js","sourcesContent":["import React from 'react'\n\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport { Button } from '@mui/material';\n\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n\n\n<ListItem>\n<ListItemButton sx={{bgcolor:'#e0f2ff'}}>\n  <ListItemIcon>\n  </ListItemIcon>\n  <ListItemText primary={note.content} />\n  <Button variant=\"contained\" color=\"success\" onClick={toggleImportance} sx={{backgroundColor:'#04b1d4'}}>\n        Change Importance\n  </Button>\n</ListItemButton>\n</ListItem>\n\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\n\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { \n  getAll, create, update\n}\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport { Button } from '@mui/material';\nimport './App.css'\n\nconst App = () => {\n\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(false)\n\n\n  \n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n\n    noteService\n      .create(noteObject)\n        .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n  \n    noteService\n    .update(id, changedNote)\n      .then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n      alert(\n        `the note '${note.content}' was already deleted from server`\n      )\n      setNotes(notes.filter(n => n.id !== id))\n    })    \n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important==true)\n\n  return (\n    <div className=\"maindiv\">\n      <h1 align='center'> Note :: Drop ðŸ’§ </h1>\n\n      <div>\n        <Button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </Button>\n      </div>\n      <List>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </List>\n      <form onSubmit={addNote} align=\"center\">\n        <input value={newNote} onChange={handleNoteChange} />\n        <br></br>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          sx={{ marginTop: 3, backgroundColor: \"#04b1d4\" }}\n        >\n          SUBMIT\n        </Button>\n      </form>\n    </div>\n  );\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}